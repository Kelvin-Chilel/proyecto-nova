import tkinter as tk  
from tkinter import scrolledtext, messagebox
from PIL import Image, ImageTk
import speech_recognition as sr
import pyttsx3
import pywhatkit
import datetime
import wikipedia
import time
import threading

window = tk.Tk()
window.title("Asistente Nova")
window.geometry("600x700")
window.resizable(False, False)
window.configure(bg="#2C3E50")

try:
    logo_image = Image.open("Logotipo Tecnología Azul (1).jpg")
    logo_image = logo_image.resize((100, 100), Image.LANCZOS)
    logo_photo = ImageTk.PhotoImage(logo_image)
    logo_label = tk.Label(window, image=logo_photo, bg="#ffffff")
    logo_label.pack(pady=10)
except Exception as e:
    print("Error al cargar el logotipo:", e)

chat_frame = tk.Frame(window, bg="#34495E", borderwidth=2, relief="groove")
chat_frame.pack(padx=10, pady=10, fill=tk.BOTH, expand=True)

chat_area = scrolledtext.ScrolledText(chat_frame, wrap=tk.WORD, state='disabled', bg="#2C3E50", fg="white", font=("Helvetica", 12))
chat_area.pack(padx=10, pady=10, fill=tk.BOTH, expand=True)

status_label = tk.Label(window, text="Estado: Esperando comandos...", bg="#2C3E50", fg="white", font=("Helvetica", 10))
status_label.pack(pady=5)

name = "nova"
listener = sr.Recognizer()
engine = pyttsx3.init()
voice_active = True

def talk(text):
    def _talk():
        engine.say(text)
        engine.runAndWait()
        append_chat("Nova: " + text)
    threading.Thread(target=_talk, daemon=True).start()

def append_chat(message):
    chat_area.after(0, lambda: update_chat(message))

def update_chat(message):
    chat_area.config(state='normal')
    chat_area.insert(tk.END, message + '\n')
    chat_area.config(state='disabled')
    chat_area.yview(tk.END)

def set_alarm(alarm_time):
    current_time = datetime.datetime.now().strftime('%H:%M')
    while current_time != alarm_time and voice_active:
        current_time = datetime.datetime.now().strftime('%H:%M')
        time.sleep(1)
    if voice_active:
        talk("¡Es hora! La alarma está sonando.")

def run_nova(command):
    rec = command.lower()
    if 'reproduce' in rec:
        music = rec.replace('reproduce', '').strip()
        response = f"Reproduciendo {music}"
        append_chat(f"Usuario: {rec}")
        talk(response)
        threading.Thread(target=play_music, args=(music,), daemon=True).start() 
    elif 'hora' in rec:
        time_now = datetime.datetime.now().strftime('%I:%M %p')
        response = f"Son las {time_now}"
        append_chat(f"Usuario: {rec}")
        talk(response)
    elif 'alarma' in rec:
        alarm_time = rec.replace('alarma a las ', '').strip()
        response = f"Alarma activada para las {alarm_time}"
        append_chat(f"Usuario: {rec}")
        talk(response)
        threading.Thread(target=set_alarm, args=(alarm_time,), daemon=True).start()
    elif 'busca' in rec:
        search = rec.replace('busca', '').strip()
        try:
            wikipedia.set_lang("es") 
            info = wikipedia.summary(search, sentences=1)  
            append_chat(f"Usuario: {rec}")
            talk(info)
        except wikipedia.exceptions.DisambiguationError:
            talk("He encontrado múltiples resultados. Por favor, sé más específico.")
        except wikipedia.exceptions.PageError:
            talk("Lo siento, no pude encontrar información sobre eso.")
    elif 'saluda' in rec:
        response = "¡Hola! ¿Cómo estás?"
        append_chat(f"Usuario: {rec}")
        talk(response)
    else:
        response = "No entiendo el comando."
        append_chat(f"Usuario: {rec}")
        talk(response)

def play_music(music):
    """Función para reproducir música usando pywhatkit."""  
    try:
        pywhatkit.playonyt(music)
    except Exception as e:
        print(f"Ocurrió un error al intentar reproducir música: {e}")
        talk("Lo siento, no pude reproducir la música.")

def wait_for_activation():
    append_chat("Nova: Esperando la activación por voz...")
    while voice_active:
        try:
            with sr.Microphone() as source:
                print("Ajustando el ruido ambiental...")
                listener.adjust_for_ambient_noise(source, duration=1)
                print("Escuchando...")
                audio = listener.listen(source, timeout=5, phrase_time_limit=5)
                rec = listener.recognize_google(audio, language='es-ES').lower()
                print(f"Reconocido: {rec}")
                if name in rec:
                    talk("¿En qué puedo ayudarte?")
                    append_chat("Nova: ¿En qué puedo ayudarte?")
                    with sr.Microphone() as source2:
                        print("Escuchando comando...")
                        listener.adjust_for_ambient_noise(source2, duration=1)
                        audio2 = listener.listen(source2, timeout=5, phrase_time_limit=10)
                        command = listener.recognize_google(audio2, language='es-ES').lower()
                        print(f"Comando recibido: {command}")
                        run_nova(command)
        except sr.WaitTimeoutError:
            print("Tiempo de espera agotado, continuando...")
            continue
        except sr.UnknownValueError:
            print("No se entendió el audio, continuando...")
            continue
        except sr.RequestError as e:
            print(f"Error del servicio de reconocimiento: {e}")
            append_chat("Nova: Hubo un problema con el servicio de reconocimiento.")
            break
        except Exception as e:
            print(f"Ocurrió un error: {e}")
            append_chat(f"Nova: Ocurrió un error: {e}")
            break
        time.sleep(0.5)

def start_assistant():
    print("Iniciando el asistente...")
    talk("Hola, soy Nova, tu asistente. ¿En qué puedo ayudarte?")
    voice_thread = threading.Thread(target=wait_for_activation, daemon=True)
    voice_thread.start()
    print("Hilo de voz iniciado.")

window.after(100, start_assistant)

if __name__ == '__main__':
    window.mainloop()
